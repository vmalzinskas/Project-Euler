/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <vector>

void TriangleNumber(int, int);
int DivisorsList(int);

int main()
{

	TriangleNumber(100000, 500);




return 0;
}

//////////////////////////////////////

// Triangle number function will find the nth triangle number // triangle numbers for even == (n/2)(n+1) for odd == ((n-1)/2)*(n+1)+((n+1)/2)

 void TriangleNumber(int numOfTris, int target_num_div)
{
	int operand_a;
	int operand_b;
	int triNum;
	int num_of_divisors;

	for(int i=1;i<=numOfTris;i++)
	{
		if(i%2==0)
		{
			operand_a = i/2;
			operand_b = i+1;
			triNum = operand_a*operand_b;
		}
		else
		{		
			operand_a = (i-1)/2;
			operand_b = (i+1)/2;
			triNum = operand_a*(i+1)+operand_b;
		}
		
		num_of_divisors=DivisorsList(triNum);
		if(num_of_divisors>=target_num_div)
		{	
			std::cout<<"The number "<<triNum<<" is the first number to have more than "<<target_num_div<<" divisors.";
			break;
		}

	}


return;
}


// Divisor function will list the divisors of a number

int DivisorsList(int n)
{	
	double root = sqrt(n);
	int count=0;

		if(n/root==root)
			count++;

	for(int i=1;i<root;i++)
	{
		if(n%i==0)
		{
			count+=2;
		}
	}


 // std::cout<<"count "<<count<<std::endl;

return count;	
}